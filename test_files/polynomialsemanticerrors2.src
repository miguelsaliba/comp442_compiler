// ====== Class declarations ====== //
class POLYNOMIAL {
	public function evaluate(x: float) => float;
	public function evaluate2(x: float) => float;                     // 6.2
};
class POLYNOMIAL {                                                        // 8.1
	public function evaluate(x: float) => float;                        
        public function evaluate(x: int) => integer;                      // 9.2
};
class LINEAR isa POLYNOMIAL {
	private attribute a: float;
	private attribute b: float;
	private attribute b: int;                                         // 8.3
	
	public function build(A: float, B: float) => LINEAR;
	public function evaluate(x: float) => float;                      // 9.3
};

class QUADRATIC isa POLYNOMIAL {
	private attribute a: float;                                       // 8.5
	private attribute b: float;                                       // 8.5
	private attribute c: float;
	
	public function build(A: float, B: float, C: float) => QUADRATIC;
	public function evaluate(x: float) => float;                      // 9.3
};

class C isa E {
	private attribute a: int; 
};

class D isa C {
	private attribute b: int; 
};

class E isa D {                                                           // 14.1
	private attribute c: int; 
};


// ====== class implementations ====== //
implementation POLYNOMIAL {   
  function evaluate(x: float) => float
  {
    return (0);
  }
}

implementation LINEAR {
  function build(A: float, B: float) => LINEAR 
  {
    local new_functiontion: LINEAR;
    new_functiontion.a = A;
    new_functiontion.b = B;
    return (new_functiontion);
  }
  function evaluate(x: float) => float 
  {
    local result: float;
    result = 0.0;
    result = a * x + b;
    return (result);
  }
} 
 
implementation QUADRATIC { 
  function evaluate(x: float) => float
  {
    local result: float;
    //Using Horner's method
    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  }
  function build(A: float, B: float, C: float) => QUADRATIC 
  {
    local new_functiontion: QUADRATIC ;
    new_functiontion.a = A + B * 3;                                       // 10.1
    new_functiontion.b = B;
    new_functiontion.c = 1;                                               // 10.2 
    return (1);                                                           // 10.3
  }
  function build2(A: float, B: float, C: float) => QUADRATIC              // 6.1
  {
    local new_functiontion: QUADRATIC;
    new_functiontion.a = A;
    new_functiontion.b = B;
    new_functiontion.c = C;
    return (new_functiontion);
  }
}
  
function f(i: integer) => void {}                                                    
function f(i: integer) => void {}                                         // 8.2
function f(i: integer, j: integer) => integer {}                          // 9.1

function f3(p1: integer[2][3]) => integer {}


// ====== main ====== //
function main() => void
{
  local a: a;                                                             // 11.5
  local c: C;
  local f1: LINEAR;
  local f2: QUADRATIC;
  local counter: integer;
  local counter: float;                                                   // 8.4
  local i: integer[2][3];
  local j: integer[1][2][3];
  f1 = f1.build(2, 3.5);
  f2 = f2.build(-2.0, 1.0, 0.0);
  c.b = 1;                                                                // 11.2
  counter = c.f();                                                        // 11.3
  undefined();                                                            // 11.4
  counter = a;                                                            // 11.1
  f(1,1,1);                                                               // 12.1
  f(1.2,1);                                                               // 12.2	
  i[2] = 1;                                                               // 13.1
  i[2][1.3] = 2;                                                          // 13.2
  f3(j);                                                                  // 13.3
  counter.x = 1;                                                          // 15.1
  self = 1;                                                               // 15.3
  f1.self = 1;                                                            // 15.2
  while(counter <= 10)
  {
    write(counter);
    write(f1.evaluate(counter));
    write(f2.evaluate(counter));
  };
}

/*
1.   |X| global symbol
2.   |X| class symbol
3.1  |X| class data member
3.2  |X| functiontion's local variable
4.1  |X| free functiontion
4.2  |X| member functiontion
6.1  |X| undeclared member functiontion definition
6.2  |X| undefined member functiontion declaration
8.1  |X| multiply declared class
8.2  |X| multiply defined free functiontion
8.3  |X| multiply declared identifier in class
8.4  |X| multiply declared identifier in functiontion
8.5  |X| shadowed inherited data member
9.1  |X| Overloaded free functiontion
9.2  |X| Overloaded member functiontion
9.3  |X| Overridden inherited member functiontion
10.1 |X| Type error in expression
10.2 |X| Type error in assignment statement 
10.3 |X| Type error in return statement
11.1 |X| Undeclared local variable
11.2 |X| Undeclared data member
11.3 |X| Undeclared member functiontion
11.4 |X| Undeclared free functiontion
11.5 |X| Undeclared class
12.1 |X| functiontion call with wrong number of parameters
12.2 |X| functiontion call with wrong type of parameters
13.1 |X| Use of array with wrong number of dimensions
13.2 |X| Array index is not an integer
13.3 |X| Array parameter using wrong number of dimensions
14.1 |X| Circular class dependency
15.1 |X| "." operator used on non-class type
*/